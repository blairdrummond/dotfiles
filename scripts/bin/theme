#!/bin/python3

import os
import curses
import subprocess
from curses import panel

THEME_DIR = '/home/blair/.themes'

theme_dir = THEME_DIR + '/colorschemes'
bitmap_dir = THEME_DIR + '/bitmaps'

save_theme = THEME_DIR + '/colortheme'
save_bitmap = THEME_DIR + '/bitmap'
save_font = THEME_DIR + '/font'
save_panel = THEME_DIR + '/panel'


try:
    devnull = subprocess.DEVNULL
    subprocess.Popen(['chtheme'], stdout=devnull, stderr=devnull).communicate()
except OSError as e:
    if e.errno == os.errno.ENOENT:
        print('chtheme was not found in your path. Exiting.')
        exit(1)

os.environ['ESCDELAY'] = '25'
STDSCR = curses.initscr()

UP = [curses.KEY_UP,    ord('k')]
DOWN = [curses.KEY_DOWN,  ord('j')]
ESC = [27, ord('q'),     ord('h'), curses.KEY_LEFT]
SELECT = [curses.KEY_ENTER, ord(' '), ord('\n'), ord('l'), curses.KEY_RIGHT]


""" Get current settings """
if os.path.isfile(save_theme):
    with open(save_theme) as f:
        THEME = f.read().strip()
else:
    THEME = 'unknown'

if os.path.isfile(save_bitmap):
    with open(save_bitmap) as f:
        BITMAP = f.read().strip()
else:
    BITMAP = 'unknown'

if os.path.isfile(save_font):
    with open(save_font) as f:
        FONT = f.read().strip()
else:
    FONT = 'unknown'


def xcalib():
    subprocess.call(['xcalib', '-invert', '-alter'])


def chtheme(*args):
    subprocess.call(['chtheme'] + list(args))


def invert():
    chtheme('invert')


def set_bitmap(f):
    def __set_bitmap__():
        chtheme('bitmap', f)
        global BITMAP
        BITMAP = f
    return __set_bitmap__


BITMAPS = [(f, set_bitmap(f)) for f in sorted(
    os.listdir(bitmap_dir)) if not f.startswith('invert')]


def set_theme(f):
    def __set_theme__():
        chtheme('theme', f)
        global THEME
        THEME = f[:-3]
    return __set_theme__


THEMES = [(f, set_theme(f))
          for f in sorted(os.listdir(theme_dir)) if f and f[0] != '.']


def set_font(f):
    def __set_font__():

        # subprocess.call(['font-resize', '1.2', '1.0'])
        # if f in ['gohufont-9']:
        #     subprocess.call(['font-resize', '1.1', '1.1'])
        # else:
        #     subprocess.call(['font-resize', '1.2', '1.1'])

        chtheme('font', f)

        global FONT
        FONT = f
    return __set_font__


class Menu(object):

    def __init__(self, items, stdscreen, title=""):

        self.title = title
        self.screen = stdscreen
        self.max_height = stdscreen.getmaxyx()[0] - 4
        self.offset = 0

        self.window = stdscreen.subwin(0, 0)

        self.search = ""

        # mypad = curses.newpad(40,60)
        # mypad.refresh(position, 0, 5, 5, 10, 60)

        # if  cmd == curses.KEY_DOWN:
        #     mypad_pos += 1
        #     mypad.refresh(mypad_pos, 0, 5, 5, 10, 60)
        # elif cmd == curses.KEY_UP:
        #     mypad_pos -= 1
        #     mypad.refresh(mypad_pos, 0, 5, 5, 10, 60)

        self.window.keypad(1)
        self.panel = panel.new_panel(self.window)
        self.panel.hide()
        panel.update_panels()

        self.position = 0
        self.items = items

    def navigate(self, n):

        offset = 1
        if self.title == "":
            offset += 2

        self.position += n

        if self.position < 0 and self.offset > 0:
            self.offset += self.position
            self.position = 0
            self.offset = max(0, self.offset)

        if self.position > self.max_height - offset:
            self.offset += self.position - self.max_height + offset
            self.position = self.max_height - offset

        if self.position + self.offset >= len(self.query()):
            self.offset = len(self.query()) - offset - self.position

        if self.position >= len(self.query()):
            self.position = len(self.query()) - offset

        if self.position < 0:
            self.position = 0

        if self.offset < 0:
            self.offset = 0

    def query(self):
        return [i for i in self.items if i[0].startswith(self.search)]

    def display(self):
        self.panel.top()
        self.panel.show()
        self.window.clear()

        while True:
            self.window.refresh()
            self.window.clear()
            self.window.addstr(0, 0, self.title, curses.A_DIM)
            try:
                self.window.addstr(min(len(self.query()) + 3, self.max_height + 3), 0,
                                   '{} | {} | {}'.format(THEME, BITMAP, FONT), curses.A_DIM)
            except:
                print('Bug')  # Not sure why this happens
            ''' 
            self.window.addstr(min(len(self.query())+3,self.max_height + 3), 0,
            '{} | {} | {} | {}:{}:{}'.format(THEME,BITMAP, FONT,self.offset,self.position,self.max_height), 
            curses.A_DIM) 

            '''
            curses.doupdate()
            for index, item in enumerate(self.query()[self.offset:self.offset + self.max_height]):
                if index == self.position:
                    mode = curses.A_REVERSE
                else:
                    mode = curses.A_NORMAL

                msg = '%s' % item[0]
                self.window.addstr(2 + index, 1, msg, mode)

            key = self.window.getch()

            if key in SELECT:
                self.query()[self.position + self.offset][1]()

            elif self.title == 'bitmaps' and key == ord('i'):
                invert()

            elif key == ord('g'):
                self.navigate(-len(self.items))

            elif key == ord('G'):
                self.navigate(len(self.items))

            elif key in UP:
                self.navigate(-1)

            elif key in DOWN:
                self.navigate(1)

            elif key == ord('/'):
                old = self.position
                self.position = 0

                oldoffset = self.offset
                self.offset = 0

                self.window.addstr(self.max_height + 3, 0,
                                   '/' + self.search + ' ' * 40, curses.A_DIM)
                while True:
                    key = self.window.getch()

                    if key == 27 or key == curses.KEY_LEFT:
                        self.search = ""
                        break

                    elif key in [curses.KEY_ENTER, ord('\n'), curses.KEY_RIGHT]:
                        self.query()[self.position + self.offset][1]()
                        self.search = ""
                        break

                    elif key in range(97, 123) or key in range(65, 91):
                        self.search += chr(key)

                    elif key == curses.KEY_DOWN:
                        self.navigate(1)

                    elif key == curses.KEY_UP:
                        self.navigate(-1)

                    elif key in [curses.KEY_BACKSPACE, curses.KEY_DC, ord(' ')]:
                        self.search = self.search[:-1]

                    self.window.refresh()
                    self.window.clear()
                    curses.doupdate()
                    self.window.addstr(
                        self.max_height + 3, 0, '/' + self.search + ' ' * 40, curses.A_DIM)
                    for index, item in enumerate(self.query()[self.offset:self.offset + self.max_height]):
                        if index == self.position:
                            mode = curses.A_REVERSE
                        else:
                            mode = curses.A_NORMAL

                        msg = '%s' % item[0]
                        self.window.addstr(1 + index, 1, msg, mode)

                self.position = old
                self.offset = oldoffset

                self.max_height = self.screen.getmaxyx()[0] - 4
                self.window.clear()
                self.panel.hide()
                panel.update_panels()
                curses.doupdate()

            elif key in ESC:
                break

            elif key == curses.KEY_RESIZE:
                self.max_height = self.screen.getmaxyx()[0] - 4
                self.window.clear()
                self.panel.hide()
                panel.update_panels()
                curses.doupdate()

        #self.max_height = self.screen.getmaxyx()[0] - 4
        # self.window.clear()
        # self.panel.hide()
        # panel.update_panels()
        # curses.doupdate()


class MyApp(object):

    def __init__(self, stdscreen):
        self.screen = stdscreen
        curses.curs_set(0)

        themes_items = THEMES
        themes = Menu(themes_items, self.screen, 'themes')

        bitmaps_items = BITMAPS
        bitmaps = Menu(bitmaps_items, self.screen, 'bitmaps')

        font_list = ['screen-9',
                     'screen-11',
                     'envypn-12',
                     'peep-8',
                     'peep-10',
                     'peep-12',
                     'gohufont-9',
                     'gohufont-11',
                     'gohufont:bold:size=11',
                     'gohufont-14',
                     'gohufont:bold:size=14',
                     #    'lemon-7',
                     'tewi-9',
                     'dina-10',
                     'kakwafont-10',
                     'terminus-9',
                     'terminus-10',
                     'terminus-12',
                     "terminus:bold:size=12",
                     'terminus-14',
                     "terminus:bold:size=14",
                     "terminus-16",
                     "terminus:bold:size=16",
                     'inconsolata-11',
                     'inconsolata-12',
                     'inconsolata-13',
                     'inconsolata-16',
                     ]

        fonts_items = [(x, set_font(x)) for x in font_list]

        fonts = Menu(fonts_items, self.screen, 'fonts')

        notify_items = [
            ('on', lambda: chtheme('notify', 'on')),
            ('off', lambda: chtheme('notify', 'off'))
        ]
        notify = Menu(notify_items, self.screen, 'notifications')

        style_items = [
            ('bitmap', lambda: chtheme('style', 'bitmap')),
            ('wallpaper', lambda: chtheme('style', 'wallpaper'))
        ]
        style = Menu(style_items, self.screen, 'notifications')

        panel_items = [
            ('on', lambda: chtheme('panel', 'true')),
            ('off', lambda: chtheme('panel', 'false')),
            ('toggle', lambda: chtheme('panel', 'toggle')),
            ('polybar', lambda: chtheme('panel', 'polybar')),
            ('xfce4', lambda: chtheme('panel', 'xfce4'))
        ]
        panel_dzen = Menu(panel_items, self.screen, 'panel')

        css_items = [
            ('dark', lambda: chtheme('css', 'dark')),
            ('light', lambda: chtheme('css', 'light'))
        ]
        css = Menu(css_items, self.screen, 'css')

        main_menu_items = [
            ('theme',   themes.display),
            ('bitmap', bitmaps.display),
            ('font',   fonts.display),
            ('notifications', notify.display),
            ('style', style.display),
            ('panel', panel_dzen.display),
            ('css',    css.display),
            ('invert', xcalib)
        ]

        main_menu = Menu(main_menu_items, self.screen, 'theme switcher')
        main_menu.display()


if __name__ == '__main__':
    curses.wrapper(MyApp)
